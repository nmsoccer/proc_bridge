#名词
##<upper/bottom>进程:upper进程指使用proc_bridge系统API进行通信的业务进程，由业务方自己开发；bottom进程指proc_bridge负责为upper进程代理通信的底层carrier进程，由proc_bridge负责维护
##<carrier>:proc_bridge系统中为具体业务进程提供通信服务的辅助进程，业务进程一般不需要关注其存在
##<proc_name>:进程名。进程名有两层含义，一种是指使用proc_bridge通信的业务进程名;一种是代指proc_bridge中为业务进程提供通信服务器的carrier进程.
#             可以认为它们共享同一个进程名
##<proc_id>:在proc_bridge系统中指定的唯一全局id，这个id既被业务进程使用同时也被该业务进程绑定的carrier进程使用
#           proc_id <= 1000 属于proc_bridge保留id，业务进程不能使用

#配置说明
#每个业务进程显式建立发送通道,发送的目标需要在CHANNEL中配置
#每个业务进程无需显式建立接收通道
#[NAME_SPACE] 定义使用proc_bridge的系统运行时的名字空间.防止同机部署多个proc_bridge系统时发生命名冲突
#[MANAGER_ADDR] 定义proc_bridge系统的管理端地址,管理端负责监控所有carrier的运行情况并提供运行&错误记录.地址格式如下IP:PORT;IP2:PORT2;...由;分割.最高不超过1000个管理端地址
#[DEFAULT_SEND_SIZE] 定义业务进程<-->委托carrier进程之间的发送缓冲区默认大小(以最大包数目表示.最大包长度默认为100K 参考proc_bridge_base.h:BRIDGE_PACKAGE_DATA_LEN)
#[DEFAULT_RECV_SIZE] 定义业务进程<-->委托carrier进程之间的接收缓冲区默认大小(以最大包数目表示.最大包长度默认为100K 参考proc_bridge_base.h:BRIDGE_PACKAGE_DATA_LEN)
#[PROC]标签用于配置需要通信的每个业务进程之进程名，进程全局id，进程在bridge系统中的部署ip,进程在bridge系统中的部署端口
#[CHANNEL]标签用于配置每个进程的发送通道

##########################CONGIGURE##################################
#BRIDGE_USER
#部署环境使用的用户名
[BRIDGE_USER]
soullei
[/BRIDGE_USER]

#BRIDGE_DIR
#部署安装的目录(绝对路径)
[BRIDGE_DIR]
/home/soullei/proc_bridge
[/BRIDGE_DIR]

#NAME_SPACE
#使用proc_bridge的系统所属名字空间。防止多个proc_bridge系统部署时可能产生的冲突
[NAME_SPACE]
cfg_template
[/NAME_SPACE]

#MANAGER_ADDR
#proc_bridge管理端所在的地址. 
#地址由IP:PORT构成.
#可以声明多个管理端地址(最多不超过1000个)，地址由;隔开
[MANAGER_ADDR]
#127.0.0.1:10000; 127.0.0.1:10001; 127.0.0.1:10002;
127.0.0.1:10000; 127.0.0.1:10001
[/MANAGER_ADDR]

#S/R CHANNEL SIZE
#默认的发送&接收缓冲区长度
[DEFAULT_SEND_SIZE]
50
[/DEFAULT_SEND_SIZE]

[DEFAULT_RECV_SIZE]
50
[/DEFAULT_RECV_SIZE]

#PROC
#每一行表示一个需要通信的进程
#格式：进程名 = 全局ID : IP : PORT : SEND_SIZE : RECV_SIZE
#进程名：业务进程名.
#全局ID：业务进程在具体业务系统中的唯一ID. id属于[1,1000]为保留id,请勿使用
#IP:	 业务进程部署的IP
#PORT:	 业务进程在proc_bridge系统中的通信端口
#SEND_SIZE: 业务进程<-->委托carrier进程的发送缓冲区长度(最大包数目). null or <=0 则使用[DEFAULT_SEND_SIZE]
#RECV_SIZE: 业务进程<-->委托carrier进程的接收缓冲区长度(最大包数目). null or <=0 则使用[DEFAULT_RECV_SIZE]
[PROC]
conn_serv-1 = 1891:127.0.0.1:10060
conn_serv-2 = 1892:127.0.0.1:10061
conn_serv-3 = 1893:127.0.0.1:10064

logic_serv-1 = 1601:127.0.0.1:10083
logic_serv-2 = 1602:127.0.0.1:10086
logic_serv-3 = 1603:127.0.0.1:10087

db_serv-1 = 1901:127.0.0.1:10070
db_serv-2 = 1902:127.0.0.1:10072
[/PROC]



#CHANNEL
#用于配制每个进程的发射通道。如果A需要与B互相通信，则A需要配置对B的发送通道；同时B配置对A的发送通道
#格式: proc_name:target_proc_name1,target_proc_name2,...
####通配符处理:在进程名合乎规范
#   proc_name='prefix+数字' 时，支持简单的通配处理: 
#   prefix[A]:prefixA
#   prefix[A-B]:prefixA 直到 prefixB (注意A<=B)
#   prefix[A;B]:prefixA 和 prefixB
#   prefix[A-B;C]:prefixA 直到 prefixB 和 prefixC
[CHANNEL]
conn_serv-[1-2;3]:logic_serv-[1;2;3]
logic_serv-[1-3]:conn_serv-[1-3],db_serv-[1;2]
db_serv-[1-2]:logic_serv-[1;2-3]
[/CHANNEL] 
